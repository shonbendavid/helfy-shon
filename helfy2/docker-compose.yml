version: '3.8'

services:
  tidb:
    image: pingcap/tidb:v6.5.0
    container_name: tidb
    ports:
      - "4000:4000"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "4000"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-net

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - app-net

  kafka-topic-init:
    build:
      context: ./cdc-consumer
      dockerfile: create-topics.Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_TOPIC=tidb-cdc-topic
    restart: "no"
    networks:
      - app-net

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    depends_on:
      kafka:
        condition: service_healthy
      tidb:
        condition: service_healthy
    environment:
      - DB_HOST=tidb
      - DB_PORT=4000
      - DB_USER=root
      - DB_PASSWORD=
      - DB_NAME=testdb
      - JWT_SECRET=your-very-secure-secret
    ports:
      - "3001:3001"
    networks:
      - app-net

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    depends_on:
      - backend
    ports:
      - "8080:80"
    networks:
      - app-net

  cdc-consumer:
    build:
      context: ./cdc-consumer
    depends_on:
      kafka-topic-init:
        condition: service_completed_successfully
    environment:
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_TOPIC=tidb-cdc-topic
    networks:
      - app-net
    command: >
      sh -c "
        echo 'Waiting for Kafka to be ready...' &&
        sleep 5 &&
        until nc -z kafka 9092; do
          sleep 2
        done &&
        echo 'Kafka is ready. Starting consumer...' &&
        node cdc-consumer.js
      "

networks:
  app-net:
    driver: bridge
